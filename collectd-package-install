#!/bin/bash

#variables used
selection=0
needed_rpm=null_rpm_link
needed_deps="tar curl"
needed_rpm_name=null_rpm_name
needed_package_name=null_package_name
stage=release
installer_level=""
interactive=1
source_type=""
name=collectd_package_install
debian_distribution_name=""

usage() {
    echo "Usage: $name [ <api_token> ] [ --beta | --test ] [ -H <hostname> ] [ -h ] [ -y ]"
    echo " -y makes the operation non-interactive. api_token is required and defaults to dns if no hostname is set"
    echo " -H <hostname> will set the collectd hostname to <hostname> instead of what dns says."
    echo " --beta will use the beta repos instead of release."
    echo " --test will use the test repos instead of release."
    echo " -h this page."
    exit $1
}

parse_args(){
    while [ $# -gt 0 ]; do
        case $1 in
           -y)
              [ -z "$source_type" ] && source_type="-s dns"
              interactive=0; shift 1 ;;
           --beta)
              stage=beta
              installer_level="-b" ; shift 1 ;;
           --test)
              stage=test
              installer_level="-T" ; shift 1 ;;
           -H)
              [ -z "$2" ] && echo "Argument required for hostname parameter." && usage -1
              source_type="-s input -H $2"; shift 2 ;;
           -h)
               usage 0; ;;
           \?) echo "Invalid option: -$1" >&2;
               exit 2;
               ;;
           *) break ;;
       esac
    done
}

if [ "$1" = "-h" ]; then
    usage 0
fi

if [ "$#" -gt 0 ]; then

    if [ ! "`echo $1 | cut -c1`" = "-" ]; then
        api_token="-t $1"
        shift
    fi
fi

if [ "$#" -gt 0 ]; then
    parse_args "$@"
fi

if [ $interactive -eq 0 ] && [ -z "$api_token" ]; then
    echo "Non-interactive requires the api token"
    usage -1
fi

#rpm file variables
centos_7_rpm="SignalFx-collectd-RPMs-centos-7-${stage}-latest.noarch.rpm"
centos_6_rpm="SignalFx-collectd-RPMs-centos-6-${stage}-latest.noarch.rpm"
aws_linux_2014_09_rpm="SignalFx-collectd-RPMs-AWS_EC2_Linux_2014_09-${stage}-latest.noarch.rpm"
aws_linux_2015_03_rpm="SignalFx-collectd-RPMs-AWS_EC2_Linux_2015_03-${stage}-latest.noarch.rpm"
aws_linux_2015_09_rpm="SignalFx-collectd-RPMs-AWS_EC2_Linux_2015_09-${stage}-latest.noarch.rpm"

#download location variables
centos_7="https://dl.signalfx.com/rpms/SignalFx-rpms/${stage}/${centos_7_rpm}"
centos_6="https://dl.signalfx.com/rpms/SignalFx-rpms/${stage}/${centos_6_rpm}"
aws_linux_2014_09="https://dl.signalfx.com/rpms/SignalFx-rpms/${stage}/${aws_linux_2014_09_rpm}"
aws_linux_2015_03="https://dl.signalfx.com/rpms/SignalFx-rpms/${stage}/${aws_linux_2015_03_rpm}"
aws_linux_2015_09="https://dl.signalfx.com/rpms/SignalFx-rpms/${stage}/${aws_linux_2015_09_rpm}"

#ppa locations for wheezy and jessie
signalfx_public_key_id="185894C15AE495F6"
wheezy_ppa="https://dl.signalfx.com/debs/collectd/wheezy/${stage}"
jessie_ppa="https://dl.signalfx.com/debs/collectd/jessie/${stage}"

#determine hostOS for newer versions of Linux
hostOS=$(cat /etc/*-release | grep PRETTY_NAME | grep -o '".*"' | sed 's/"//g' | sed -e 's/([^()]*)//g' | sed -e 's/[[:space:]]*$//')
if [ ! -f /etc/redhat-release ]
   then
      hostOS_2=null_os
   else
   	  #older versions of RPM based Linux that don't have version in PRETTY_NAME format
      hostOS_2=$(head -c 16 /etc/redhat-release)
fi

#determine if the script is being run by root or not
user=$(whoami)
if [ "$user" == "root" ]; then
    sudo=""
else
    sudo="sudo"
fi

#Functions used throughout
basic_collectd()
{
   options=" ${source_type} ${installer_level} ${api_token}"
   printf "Starting Configuration of collectd... $options \n"

   curl -sSL https://dl.signalfx.com/collectd-simple | $sudo bash -s -- $options
}

#Function to determine the OS to install for from end user input
assign_needed_os()
{
    case $selection in
        #REHL/Centos 7.x
        1)
            hostOS="CentOS Linux 7"
        ;;
        #REHL/Centos 6.x
        2)
            hostOS="CentOS Linux 6"
        ;;
        #Amazon Linux 2015.09
        3)
            hostOS="Amazon Linux AMI 2015.09"
        ;;
        #Amazon Linux 2015.03
        4)
            hostOS="Amazon Linux AMI 2015.03"
        ;;
        #Amazon Linux 2014.09
        5)
            hostOS="Amazon Linux AMI 2014.09"
        ;;
        #Ubuntu 15.04
        6)
            hostOS="Ubuntu 15.04"
        ;;
        #Ubuntu 14.04
        7)
            hostOS="Ubuntu 14.04.1 LTS"
        ;;
        #Ubuntu 12.04
        8)
            hostOS="Ubuntu 12.04"
        ;;
        #Debian GNU/Linux 7 (wheezy) 
        9)
            hostOS="Debian GNU/Linux 7"
        ;;
        #Debian GNU/Linux 8 (jessie)
        10)
            hostOS="Debian GNU/Linux 8"
        ;;
        *)
        printf "error occurred. Exiting. Please contact support@signalfx.com\n" && exit 0
        ;;
    esac
}

#Validate the users input
validate_os_input()
{
if [[ "$selection" =~ ^[0-9]+$ ]] && [[ "$selection" -ge 1 && "$selection" -le 10 ]]
    then
        assign_needed_os
elif [ "$selection" == 11 ];
    then
        printf "\nWe currently do not support any other Linux distribution with our collectd packages.
Please visit https://support.signalfx.com/hc/en-us/articles/201094025-Use-collectd for detailed
instructions on how to install collectd for various Linux distributions or contact support@signalfx.com\n" && exit 0
elif [ "$selection" == 0 ];
    then
        printf "\nGood Bye!" && exit 0
else
    printf "\nInvalid user input please make a Distribution selection of 1 through 8.
Enter your Selection: "
    read -r selection < /dev/tty
    validate_os_input
fi
}

#Get end user input for OS to install for
get_os_input()
{
	#Ask end user for what OS to install for
	printf "\nWe were unable to automatically determine the version of Linux you are on!
Please enter the number of the OS you wish to install for:
1. RHEL/Centos 7
2. RHEL/Centos 6.x
3. Amazon Linux 2015.09
4. Amazon Linux 2015.03
5. Amazon Linux 2014.09
6. Ubuntu 15.04
7. Ubuntu 14.04
8. Ubuntu 12.04
9. Debian GNU/Linux 7
10. Debian GNU/Linux 8
11. Other 
0. Exit
Enter your Selection: "
	read -r selection < /dev/tty

    validate_os_input

}

#confirm user input (yes or no)
confirm ()
{
    [ $interactive -eq 0 ] && return
    read -r -p "Is this correct? [y/N] " response < /dev/tty
    if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]
        then
    return
    else
        exit 0
    fi
}

#RPM Based Linux Functions
#Install function for RPM collectd
install_rpm_collectd_procedure()
{
    #install deps
    printf "Installing Dependencies\n"
    $sudo yum -y install $needed_deps

    #download signalfx rpm for collectd
    printf "Downloading SignalFx RPM\n"
    curl $needed_rpm -o $needed_rpm_name

    #install signalfx rpm for collectd
    printf "Installing SignalFx RPM\n"
    $sudo yum -y install $needed_rpm_name

    #install collectd from signalfx rpm
    printf "Installing collectd\n"
    $sudo yum -y install collectd

    #install base plugins signalfx deems necessary
    printf "Installing base-plugins\n"
    $sudo yum -y install collectd-disk collectd-write_http

    basic_collectd
}

#Debian Based Linux Functions
#Install function for debian based systems
install_debian_collectd_procedure() #install function for debian collectd
{
    #update apt-get
    printf "Updating apt-get\n"
    $sudo apt-get -y update
    if [ "$stage" = "test" ]; then
        needed_deps="$needed_deps apt-transport-https"
    fi

    #Installing dependent packages to later add signalfx repo
    printf "Installing source package to get SignalFx collectd package\n"
    $sudo apt-get -y install $needed_deps $needed_package_name

    if [ "$stage" = "test" ]; then
        printf "Getting SignalFx collectd package from test repo hosted at SignalFx\n"
        echo "deb [trusted=yes] https://dl.signalfx.com/debs/collectd/${debian_distribution_name}/${stage} /" | sudo tee --append /etc/apt/sources.list.d/signalfx_collectd-${stage}-${debian_distribution_name}.list > /dev/null
    else
        #Adding signalfx repo
        printf "Getting SignalFx collectd package\n"
        if [ "$debian_distribution_name" == "wheezy" ] || [ "$debian_distribution_name" == "jessie" ]; then
            $sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys $signalfx_public_key_id
            echo "deb ${repo_link} /" | sudo tee --append /etc/apt/sources.list.d/signalfx_collectd.list > /dev/null
        else
            $sudo add-apt-repository -y ppa:signalfx/collectd-${stage}
        fi
    fi

    #Updating apt-get to reference the signalfx repo to install collectd
    printf "Updating apt-get to reference new SignalFx package\n"
    $sudo apt-get -y update

    #Installing signalfx collectd package and plugins
    printf "Installing collectd and additional plugins\n"
    $sudo apt-get -y install collectd collectd-core

    #Configuring collectd with basic configuration
    basic_collectd
}

#take "hostOS" and match it up to OS and assign tasks
perform_install_for_os()
{
case $hostOS in
    "CentOS Linux 7")
        needed_rpm=$centos_7
        needed_rpm_name=$centos_7_rpm
        printf "Install will proceed for %s\n" "$hostOS"
        confirm
        install_rpm_collectd_procedure
    ;;
    "CentOS Linux 6")
        needed_rpm=$centos_6
        needed_rpm_name=$centos_6_rpm
        printf "Install will proceed for %s\n" "$hostOS"
        confirm
        install_rpm_collectd_procedure
    ;;
    "Amazon Linux AMI 2014.09")
        needed_rpm=$aws_linux_2014_09
        needed_rpm_name=$aws_linux_2014_09_rpm
        printf "Install will proceed for %s\n" "$hostOS"
        confirm
        install_rpm_collectd_procedure
    ;;
    "Amazon Linux AMI 2015.03")
        needed_rpm=$aws_linux_2015_03
        needed_rpm_name=$aws_linux_2015_03_rpm
        printf "Install will proceed for %s\n" "$hostOS"
        confirm
        install_rpm_collectd_procedure
    ;;
    "Amazon Linux AMI 2015.09")
        needed_rpm=$aws_linux_2015_09
        needed_rpm_name=$aws_linux_2015_09_rpm
        printf "Install will proceed for %s\n" "$hostOS"
        confirm
        install_rpm_collectd_procedure
    ;;
    "Ubuntu 15.04"*)
        needed_package_name=software-properties-common
        printf "Install will proceed for %s\n" "$hostOS"
        confirm
        debian_distribution_name="vivid"
        install_debian_collectd_procedure
    ;;
    "Ubuntu 14.04"*)
        needed_package_name=software-properties-common
        printf "Install will proceed for %s\n" "$hostOS"
        confirm
        debian_distribution_name="trusty"
        install_debian_collectd_procedure
    ;;
    "Ubuntu 12.04"* | "Ubuntu precise"*)
        needed_package_name=python-software-properties
        printf "Install will proceed for %s\n" "$hostOS"
        confirm
        debian_distribution_name="precise"
        install_debian_collectd_procedure
    ;;
    "Debian GNU/Linux 7")
        needed_package_name="apt-transport-https"
        printf "Install will proceed for %s\n" "$hostOS"
        confirm
        repo_link=$wheezy_ppa
        debian_distribution_name="wheezy"
        install_debian_collectd_procedure
    ;;
    "Debian GNU/Linux 8")
        needed_package_name="apt-transport-https"
        printf "Install will proceed for %s\n" "$hostOS"
        confirm
        repo_link=$jessie_ppa
        debian_distribution_name="jessie"
        install_debian_collectd_procedure
    ;;
    *)
    case $hostOS_2 in
        "CentOS release 6")
            needed_rpm=$centos_6
            needed_rpm_name=$centos_6_rpm
            printf "Install will proceed for %s\n" "$hostOS_2"
            confirm
            install_rpm_collectd_procedure
        ;;
        *)
            get_os_input
            perform_install_for_os
        ;;
    esac
    ;;
esac
}

#Determine the OS and install/configure collectd to send metrics to SignalFx
perform_install_for_os

